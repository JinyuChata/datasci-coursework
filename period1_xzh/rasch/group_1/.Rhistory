resp=resd.csv('D1_scored.csv')
x <- rnorm(100,mean=5,sd=0.1)
mean(x)
sd(x)
summary(x)
demo(graphics)
coef(monopoly,simplify=TRUE)
monopoly<-mirt(data,1,'monopoly')
coef(monopoly,simplify=TRUE)
install.packages('mirt')
library('mirt')
monopoly<-mirt(data,1,'monopoly')
coef(monopoly,simplify=TRUE)
setwd("E:/study/2020Spring/数据科学基础/大作业/github/datasci-coursework/period1_xzh/rasch/group_1")
install.packages('TAM')
library('TAM')
install.packages('ggplot2')
library('ggplot2')
install.packages('mirt')
install.packages('ShinyItemAnalysis')
library('ShinyItemAnalysis')
library('mirt')
resp = read.csv("group1_results0_1.csv")
result = tam(resp)
result$xsi$xsi #难度参数
#学生能力
ability = tam.wle(result)
ability$theta #能力
#ICC
#window(plot(result))
#wrightmap
install.packages("WrightMap")
library("WrightMap")
windows()
ggWrightMap(ability$theta,result$xsi$xsi,color = 'grey')
windows()
wrightMap(ability$theta,result$xsi$xsi,
person.side = personDens,show.axis.logits = FALSE)
windows()
ggWrightMap(ability$theta,result$xsi$xsi,color = 'grey')
#ICC
window(plot(result))
resp-all = read.csv("group1_results0_1.csv")
resp-all = read.csv("group1_results0_1.csv")
resp-array = read.csv("group1_results_array_0_1.csv")
resp-graph = read.csv("group1_results_graph_0_1.csv")
resp-linear = read.csv("group1_results_linear_0_1.csv")
resp-number = read.csv("group1_results_number_0_1.csv")
resp-searching = read.csv("group1_results_searching_0_1.csv")
resp-sorting = read.csv("group1_results_sorting_0_1.csv")
resp-string = read.csv("group1_results_string_0_1.csv")
resp-tree = read.csv("group1_results_tree_0_1.csv")
#读取数据
resp_all = read.csv("group1_results0_1.csv")
resp_array = read.csv("group1_results_array_0_1.csv")
resp_graph = read.csv("group1_results_graph_0_1.csv")
resp_linear = read.csv("group1_results_linear_0_1.csv")
resp_number = read.csv("group1_results_number_0_1.csv")
resp_searching = read.csv("group1_results_searching_0_1.csv")
resp_sorting = read.csv("group1_results_sorting_0_1.csv")
resp_string = read.csv("group1_results_string_0_1.csv")
resp_tree = read.csv("group1_results_tree_0_1.csv")
result_all = tam(resp_all)
#跑tam
result_all = tam(resp_all)
result_array = tam(resp_array)
result_graph = tam(resp_graph)
result_linear = tam(resp_linear)
result_number = tam(resp_number)
result_searching = tam(resp_searching)
result_sorting = tam(resp_sorting)
result_string = tam(resp_string)
result_tree = tam(resp_tree)
ability_param=(tam.wle(result))$theta #能力
ability_param_all=(tam.wle(result_all))$theta
#获取难度参数
difficulty_param_all=result_all$xsi$xsi
difficulty_param_array=result_array$xsi$xsi
difficulty_param_graph=result_graph$xsi$xsi
difficulty_param_linear=result_linear$xsi$xsi
difficulty_param_number=result_number$xsi$xsi
difficulty_param_searching=result_searching$xsi$xsi
difficulty_param_sorting=result_sorting$xsi$xsi
difficulty_param_string=result_string$xsi$xsi
difficulty_param_tree=result_tree$xsi$xsi
#学生能力
ability = tam.wle(result_all)
ability_param_all=(tam.wle(result_all))$theta
ability_param_array=(tam.wle(result_array))$theta
ability_param_graph=(tam.wle(result_graph))$theta
ability_param_linear=(tam.wle(result_linear))$theta
ability_param_number=(tam.wle(result_number))$theta
ability_param_searching=(tam.wle(result_searching))$theta
ability_param_sorting=(tam.wle(result_sorting))$theta
ability_param_string=(tam.wle(result_string))$theta
ability_param_tree=(tam.wle(result_tree))$theta
ICC_all=plot(result_all)
#windows()
#ggWrightMap(ability$theta,result$xsi$xsi,color = 'grey')
#windows()
wrightMap(ability_param_all),difficulty_param_all,
person.side = personDens,show.axis.logits = FALSE)
#windows()
#ggWrightMap(ability$theta,result$xsi$xsi,color = 'grey')
#windows()
wrightMap(ability_param_all,difficulty_param_all,
person.side = personDens,show.axis.logits = FALSE)
#windows()
#ggWrightMap(ability$theta,result$xsi$xsi,color = 'grey')
#windows()
wrightMap(ability_param_all,difficulty_param_all,
person.side = personDens,show.axis.logits = TRUE)
#windows()
#ggWrightMap(ability$theta,result$xsi$xsi,color = 'grey')
#windows()
wrightMap(ability_param_all,difficulty_param_all,
person.side = personDens,show.axis.logits = TRUE)
#windows()
ggWrightMap(ability_param_all,difficulty_param_all,color = 'grey')
ggWrightMap(ability_param_all,difficulty_param_all,color = 'grey')
ggWrightMap(ability_param_array,difficulty_param_array,color = 'grey')
ggWrightMap(ability_param_graph,difficulty_param_graph,color = 'grey')
ggWrightMap(ability_param_linear,difficulty_param_linear,color = 'grey')
ggWrightMap(ability_param_number,difficulty_param_number,color = 'grey')
ggWrightMap(ability_param_searching,difficulty_param_searching,color = 'grey')
ggWrightMap(ability_param_sorting,difficulty_param_sorting,color = 'grey')
ggWrightMap(ability_param_string,difficulty_param_string,color = 'grey')
ggWrightMap(ability_param_tree,difficulty_param_tree,color = 'grey')
